from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from Tk import token
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import csv
from time_docs import dict_docs
from louder import Schedule, Special, Booking, Account
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from keyboards import kb_start, kb_yes_or_no, kb_docs, kb_date
from docs_passwords import get_password

# -*- coding: utf-8 -*-

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN_API = token

bot = Bot(TOKEN_API)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

list_kb_times = list()
docs_sp = list()
with open('data/doc_list.csv', 'r', newline='') as csvfile:
    spamreader = csv.reader(csvfile)
    for row in spamreader:
        kb_docs.add(row[0])
        docs_sp.append(row)


def get_dict_of_username_docs(docs_sp):
    dict_of_ids = dict()
    for row in docs_sp:
        dict_of_ids[row[0]] = row[3]

    return dict_of_ids


def get_dict_of_id_docs(docs_sp):
    dict_of_ids = dict()
    for row in docs_sp:
        dict_of_ids[row[0]] = row[4]

    return dict_of_ids


greetings = f'''üòá –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! üòá \n\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ <u>telegram-–±–æ—Ç–µ</u> –∫–ª–∏–Ω–∏–∫–∏ <code>–û–û–û"–ë–æ–±—ë—Ä"</code> ü¶´\n
‚ùóÔ∏è–ù–∞—à–∞ –∫–ª–∏–Ω–∏–∫–∞ –æ—Å–Ω–∞—â–µ–Ω–∞ <b>–ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º</b>, 
–≤–µ–¥—å —Å—á–∞—Å—Ç–ª–∏–≤–∞—è –∂–∏–∑–Ω—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ - —ç—Ç–æ –Ω–∞—à–∞ –∑–∞–±–æ—Ç–∞ ü©ª\n\n‚ùïÔ∏è–£–¥–æ–±–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ \
–∑–¥–∞–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞–º <i>–±—ã—Å—Ç—Ä–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ</i> –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –Ω–µ–π\n
‚ÄºÔ∏è–õ—É—á—à–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å—Ç—Ä–∞–Ω—ã —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã\n
ü©π –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è \
—Å –æ—Ç–∑—ã–≤–∞–º–∏ –∫–ª–∏–Ω–∏–∫–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–º {'<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">—Å–∞–π—Ç–µ</a>'}\n\n
üîÖ –î–∞–Ω–Ω—ã–π –±–æ—Ç –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É, \
–∞ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–ø—É—Ç—Å–≤—É—é—â–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É. –î–ª—è\
 –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É(1) –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö(4) —Ñ—É–Ω–∫—Ü–∏–π –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ üîÖ'''


def remove_time(dict_docs, list_of_data):
    cur_list = dict_docs[list_of_data[0]][list_of_data[1]]
    cur_list.remove(list_of_data[2])
    return cur_list


# ü©∫ü©ªüå°ü©π‚ùóÔ∏è‚ùïüîÖ„ÄΩÔ∏èüåÄüïë‚ñ´Ô∏èüî∏üîªüî∫üü¢üîµ‚ö™Ô∏èüü£üîπ‚òëÔ∏èüü©üîîüïòüì¢‚ÄºÔ∏èüõéüß¨üóìüìÜ

def get_schedule(timee):
    s = ''
    for j in timee.items():
        if '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' in j[1]:
            s += f'{j[0]} - –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n'
        elif not j[1]:
            s += f'{j[0]} - –í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–±—Ä–Ω–∏—Ä–æ–≤–∞–Ω—ã\nx'
        else:
            s += f'{j[0]} - {" ".join(j[1])}\n'
    return s


@dp.message_handler(commands=['start'], state='*')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(message: types.Message):
    beaver_center = open('data/other_photo/beavercenter.jpg', 'rb')
    await message.delete()

    await bot.send_photo(message.chat.id, beaver_center, caption=greetings, reply_markup=kb_start, parse_mode='HTML')


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.reply('‚ö†Ô∏è<i>–í–æ–∑—Ä–∞—â–∞—é</i> <b>–≤–∞—Å</b> –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_start, parse_mode="HTML")


@dp.message_handler(Text(equals='üîî –ó–∞–ø–∏—Å—å üõé'), state=None)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å—å"
async def booking(message: types.Message):
    await message.answer(
        text=f'üß¨ –í—ã–±–µ—Ä–∏—Ç–µ <b>–≤—Ä–∞—á–∞</b> <u>–∏–∑</u> –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ <u>—Å–ø–∏—Å–∫–∞</u>: üß¨',
        reply_markup=kb_docs,
        parse_mode="HTML")
    await Booking.name.set()


@dp.message_handler(lambda message: [message.text] not in list(kb_docs)[0][1], state=Booking.name)
async def procces_date_invalid(message: types.Message, state: FSMContext):
    return await message.reply('‚ùó –î–∞–Ω–Ω—ã–π –≤–∞–º–∏ <b>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b> –≤ <code>–û–û–û"–ë–æ–±—ë—Ä"</code> ü¶´.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <u>–≤—ã–±–µ—Ä–∏ –≤—Ä–∞—á–∞</u> —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                               reply_markup=kb_docs, parse_mode="HTML")


@dp.message_handler(state=Booking.name)
async def procces_date(message: types.Message, state: FSMContext):
    async with state.proxy() as list_of_data:
        list_of_data['name'] = message.text

    await message.answer(
        text=f'üóì –í—ã–±–µ—Ä–∏—Ç–µ <i>—É–¥–æ–±–Ω—É—é</i> –¥–ª—è –≤–∞—Å –¥–∞—Ç—É <u>–∏–∑</u> <b>–Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ</b> <u>—Å–ø–∏—Å–∫–∞</u>:',
        reply_markup=kb_date, parse_mode="HTML")
    await Booking.next()


@dp.message_handler(lambda message: [message.text] not in list(kb_date)[0][1], state=Booking.date_booking)
async def process_times_invalid(message: types.Message, state: FSMContext):
    return await message.reply('‚ùó –í—ã–±—Ä–∞–Ω–∞ <b>–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <u>–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</u> —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', reply_markup=kb_date, parse_mode="HTML")


@dp.message_handler(state=Booking.date_booking)
async def process_times(message: types.Message, state: FSMContext):
    global list_kb_times
    async with state.proxy() as list_of_data:
        list_of_data['date'] = message.text

    kb_times = ReplyKeyboardMarkup(resize_keyboard=True)

    time_doc = dict_docs[list_of_data['name']][list_of_data['date']]
    if time_doc == '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç':
        await message.answer(
            text=f'‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <u>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</u> –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ <b>–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å</b> –∏–ª–∏ <b>–ø–æ–º–µ–Ω—è—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.</b>',
            reply_markup=kb_start, parse_mode="HTML"
        )
        await state.finish()

    else:
        for i in time_doc:
            kb_times.add(i)
        list_kb_times = list(kb_times)[0][1]
        print(time_doc)
        if time_doc:
            await Booking.next()
            await message.answer(
                text=f'‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ <i>—É–¥–æ–±–Ω–æ–µ</i> –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è <u>–∏–∑</u> <b>–Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ</b> <u>—Å–ø–∏—Å–∫–∞</u>:',
                reply_markup=kb_times, parse_mode="HTML"
            )
        else:
            await message.answer(
                text=f'‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <u>–≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã.</u> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å <i>–¥—Ä—É–≥–æ–π</i> <b>–¥–µ–Ω—å</b>',
                reply_markup=kb_start, parse_mode="HTML"
            )
            await state.finish()


@dp.message_handler(lambda message: [message.text] not in list_kb_times, state=Booking.time_booking)
async def process_check_true_booking_invalid(message: types.Message, state: FSMContext):
    return await message.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <u>–≤—ã–±–µ—Ä–∏—Ç–µ</u> <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> <u>–≤—Ä–µ–º—è</u> —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', parse_mode="HTML")


@dp.message_handler(state=Booking.time_booking)
async def process_check_true_booking(message: types.Message, state: FSMContext):
    await Booking.next()
    async with state.proxy() as list_of_data:
        list_of_data['time'] = message.text
    kb_times = ReplyKeyboardMarkup(resize_keyboard=True)
    print(list_of_data)

    await message.answer(
        text=f'üí° –î–∞–≤–∞–π—Ç–µ <b>—É—Ç–æ—á–Ω–∏–º</b> –≤–∞—à <b>–≤—ã–±–æ—Ä.</b>\n<i>–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫:</i> <b>{list_of_data["name"]}</b>\n<i>–í —ç—Ç—É –¥–∞—Ç—É:</i> <b>{list_of_data["date"]}</b>\n<i>–í —ç—Ç–æ –≤—Ä–µ–º—è:</i> <b>{list_of_data["time"]}</b>\n<u>–í—Å–µ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</u>',
        reply_markup=kb_yes_or_no, parse_mode="HTML"
    )


@dp.message_handler(lambda message: message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç'], state=Booking.check_true_booking)
async def check_result_invalid(message: types.Message, state: FSMContext):
    return await message.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤—ã–±–µ—Ä–∏—Ç–µ</b> <u>–î–ê</u> –∏–ª–∏ <u>–ù–ï–¢</u> —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                               reply_markup=kb_yes_or_no, parse_mode="HTML")


@dp.message_handler(Text(equals='–î–∞'), state=Booking.check_true_booking)
async def check_result_yes(message: types.Message, state: FSMContext):
    async with state.proxy() as list_of_data:
        list_of_data['yes'] = message.text
    with open('data/dates_of_booking.csv', 'a', newline='', encoding='utf-8') as csvfile:
        spamwriter = csv.writer(csvfile)
        spamwriter.writerows([[list_of_data['name'], list_of_data['date'], list_of_data['time'], message.from_user.id]])
    new_list = remove_time(dict_docs, [list_of_data['name'], list_of_data['date'], list_of_data['time']])
    dict_docs[list_of_data['name']][list_of_data['date']] = new_list

    dict_of_username = get_dict_of_username_docs(docs_sp)
    dict_of_ids = get_dict_of_id_docs(docs_sp)

    await message.answer(
        text=f'<b>–û—Ç–ª–∏—á–Ω–æ!</b>\nüéÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã <b>—É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É</b> –∫–ª–∏–Ω–∏–∫–∏ <code>–û–û–û"–ë–æ–±—ë—Ä"!</code> –í—ã –º–æ–∂–µ—Ç–µ –ª–∏—á–Ω–æ <i>—Å–≤—è–∑–∞—Ç—å—Å—è</i> —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º ‚û° {dict_of_username[list_of_data["name"]]}',
        reply_markup=kb_start, parse_mode="HTML"
    )
    doc_id = dict_of_ids[list_of_data['name']]
    ans = f'üí° –û–ø, –æ–ø. –ö –≤–∞–º <i>–∑–∞–ø–∏—Å–∞–ª—Å—è –∫–ª–∏–µ–Ω—Ç–∏–∫</i> ‚û° @{message.from_user.username}.\n<u>–î–∞—Ç–∞</u> - <b>{list_of_data["date"]}</b>\n<u>–í—Ä–µ–º—è</u> - <b>{list_of_data["time"]}</b>'
    if doc_id != '':
        await bot.send_message(doc_id, ans, parse_mode="HTML")
    await state.finish()


@dp.message_handler(Text(equals='–ù–µ—Ç'), state=Booking.check_true_booking)
async def check_result_yes(message: types.Message, state: FSMContext):
    await message.answer(
        text=f'‚ö†Ô∏è<i>–í–æ–∑—Ä–∞—â–∞—é</i> <b>–≤–∞—Å</b> –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kb_start, parse_mode="HTML"
    )
    await state.finish()


@dp.message_handler(Text(equals='üïë –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïò'), state=None)
async def schedule(message: types.Message):
    await message.answer(
        text=f'üìÜ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å <b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö <u>–≤—Ä–∞—á–µ–π –∫–ª–∏–Ω–∏–∫–∏</u>, <i>–≤–µ–±–µ—Ä–∏—Ç–µ –∏–º—è</i> —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ <i>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞</i> –∏–∑ <u>—Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.</u>\n\n'
f'–ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>–≤–µ—Ä–Ω—É—Ç—å—Å—è</b> –≤ <i>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>, –≤–≤–µ–¥–∏—Ç–µ /cancel –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
        reply_markup=kb_docs, parse_mode="HTML")
    await Schedule.sch_name.set()


@dp.message_handler(lambda message: [message.text] not in list(kb_docs)[0][1], state=Schedule.sch_name)
async def schedule_invalid(message: types.Message, state: FSMContext):
    return await message.reply('‚ùó –î–∞–Ω–Ω—ã–π –≤–∞–º–∏ <b>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b> –≤ <code>–û–û–û"–ë–æ–±—ë—Ä"</code> ü¶´.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <u>–≤—ã–±–µ—Ä–∏ –≤—Ä–∞—á–∞</u> —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                               reply_markup=kb_docs, parse_mode="HTML")


@dp.message_handler(state=Schedule.sch_name)
async def schedule(message: types.Message, state: FSMContext):
    timee = dict_docs[message.text]
    dates_for_schedule = get_schedule(timee)
    await message.answer(
        text=dates_for_schedule,
        reply_markup=kb_start)
    await state.reset_state()


@dp.message_handler(Text(equals='‚òë –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ‚úÖ'), state=None)
async def specialists(message: types.Message):
    await message.answer(
        text=f'üìç –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ <i>–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å</i> –±–∞–∑–æ–≤–æ–π <i>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</i> '
             f'–æ <b>–ª—é–±–æ–º</b> –∏–∑ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ <u>–≤—ã–±–µ—Ä–∏—Ç–µ</u> –µ–≥–æ <u>–∏–º—è</u> –∏–∑ <b>—Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.</b>\n–ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>–≤–µ—Ä–Ω—É—Ç—å—Å—è</b> –≤ <i>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>, –≤–≤–µ–¥–∏—Ç–µ /cancel –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
        reply_markup=kb_docs, parse_mode="HTML")
    await Special.spec_name.set()


@dp.message_handler(lambda message: [message.text] not in list(kb_docs)[0][1], state=Special.spec_name)
async def specialist_info_invalid(message: types.Message, state: FSMContext):
    return await message.reply('–¢–∞–∫–æ–π –≤—Ä–∞—á —É –Ω–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤—Ä–∞—á–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                               reply_markup=kb_docs)


@dp.message_handler(state=Special.spec_name)
async def specialist_info(message: types.Message, state: FSMContext):
    for i in docs_sp:
        if i[0] == message.text:
            try:
                path = f'data/photo_docs/{i[0]}.jpg'
                photo = open(path, 'rb')
            except Exception as ex:
                path = f'data/photo_docs/{i[0]}.png'
                photo = open(path, 'rb')
            await bot.send_photo(chat_id=message.chat.id,
                                 photo=photo,
                                 caption=f'üîç <i>–§–ò–û:</i>      <b>{i[0]}</b>\nüéØ <i>–û–±–ª–∞—Å—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</i>      <b>{i[1]} </b>\n\nüï∞ <i>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</i>      <b>{i[2]}</b>',
                                 reply_markup=kb_start, parse_mode="HTML")
            await state.reset_state()
#üéñüèÖüéóüéØüéÜüåáüåÜüåÑü©º‚åõÔ∏è‚è≥üï∞üí°‚è∞‚è±ü©∏ü¶†üíäüìÜüìÖüóìüóíüìåüìçüîç

@dp.message_handler(Text(equals='ü©∫ –í—Ä–∞—á. –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å üå°'), state=None)
async def account(message: types.Message):
    await Account.name.set()
    await message.answer(
        text=f'–ö—Ç–æ —Ç—ã',
        reply_markup=kb_docs)


@dp.message_handler(lambda message: [message.text] not in list(kb_docs)[0][1], state=Account.name)
async def procces_password_invalid(message: types.Message, state: FSMContext):
    return await message.reply('–¢–∞–∫–æ–π –≤—Ä–∞—á —É –Ω–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤—Ä–∞—á–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                               reply_markup=kb_docs)


@dp.message_handler(state=Account.name)
async def procces_password(message: types.Message, state: FSMContext):
    global data
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=types.ReplyKeyboardRemove())
    await Account.next()


@dp.message_handler(lambda message: message.text != get_password(data['name']), state=Account.password)
async def password_invalid(message: types.Message, state: FSMContext):
    return await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ - cancel')


@dp.message_handler(state=Account.password)
async def password_true(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pass'] = message.text
    await message.answer('–•–∞—Ä–æ—à')


if __name__ == '__main__':
    executor.start_polling(dp)
